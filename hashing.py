import hmac
import random
import hashlib
import string

#SECRET comes from here
import config

##### Creates a secure cookie to be sent
def hash_str(s):
    return hmac.new(config.config['SECRET'], s).hexdigest()

# Creates an string with format string, hashed value:
# "cool,b1f4f9a523e36fd969f4573e25af4540"
def make_secure_val(s):
    return '%s|%s' % (s, hash_str(s))

# If the original value hasnt been modified, it will match with the full
# string generated by make_secure_val
def check_secure_val(h):
    val = h.split('|')[0]
    if h == make_secure_val(val):
        return val

##### Creates a hashed password using SALT and Hashlib.sha256

# Returns 5 random letters
def make_salt():
    return ''.join(random.choice(string.letters) for x in range(5))

def make_pw_hash(name, pw, salt=""):
    if(salt == ''):
        salt = make_salt()
    h = hashlib.sha256(name + pw + salt).hexdigest()
    return '%s,%s' % (h, salt)

# h would be the complete hash. It would be the one kept in db
def valid_pw(name, pw, h):
    salt = h.split(',')[1]
    return h == make_pw_hash(name, pw, h)
