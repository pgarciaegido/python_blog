# Built-in modules
import hashlib
import hmac
import random
import string

# SECRET comes from here
import config


def hash_str(s):
    """ Creates a secure cookie to be sent """
    return hmac.new(config.config['SECRET'], s).hexdigest()


def make_secure_val(s):
    """ Creates an string with format string, hashed value:
        "cool,b1f4f9a523e36fd969f4573e25af4540" """
    return '%s|%s' % (s, hash_str(s))


def check_secure_val(h):
    """ If the original value hasnt been modified, it will match with the full
        string generated by make_secure_val """
    val = h.split('|')[0]
    if h == make_secure_val(val):
        return val


# Creates a hashed password using SALT and Hashlib.sha256
def make_salt():
    """ Returns 5 random letters """
    return ''.join(random.choice(string.letters) for x in range(5))


def make_pw_hash(name, pw, salt=""):
    """ Creates hashed password using a random salt, the name and the
        given password """
    if(salt == ''):
        salt = make_salt()
    h = hashlib.sha256(name + pw + salt).hexdigest()
    return '%s,%s' % (h, salt)


def valid_pw(name, pw, h):
    """ Checks if the password is valid.
        h would be the complete hash kept in db """
    salt = h.split(',')[1]
    return h == make_pw_hash(name, pw, salt)
